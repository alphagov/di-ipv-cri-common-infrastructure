AWSTemplateFormatVersion: "2010-09-09"
Description: "Cloudformation teamplate for creating address frontend in fargate"

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names.
    Type: String
  ECRrepo:
    Type: String
    Description: "Enter the name of the ECR image and tag. Eg For the repo 123.dkr.ecr.eu-west-2.amazonaws.com/test:1 enter test:1"

Resources:

  ## Networking

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    DependsOn:
      - VPC
      - InternetGateway
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: "10.0.10.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn:
      - VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: "10.0.11.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn:
      - InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn:
      - InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - NatGateway1EIP
      - PublicSubnet1
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - NatGateway2EIP
      - PublicSubnet2
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

################ Role
  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
################ Task definition
  AddressTaskDefintion:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      ExecutionRoleArn: !GetAtt
        - ECSTaskExecutionRole
        - Arn
      Cpu: 256
      Memory: 512
      NetworkMode: "awsvpc"
      ContainerDefinitions:
        - Name: !Sub ${AWS::StackName}-Address-frontend
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRrepo}"
          MemoryReservation: 256
          Memory: 512
          PortMappings:
            - ContainerPort: 5010
              Protocol: tcp
################ Cluster
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-address-cluster
################  Application Load balancer.
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - PublicSubnet1
      - PublicSubnet2
    Properties:
      Name: AddressCriFrontALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application
      SecurityGroups:
        -  !GetAtt FargateAlbSG.GroupId
################ Target Group
  AddressTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - VPC
    Properties:
      Name: !Sub ${AWS::StackName}-tg
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 5010
      HealthCheckPath: /
      Matcher:
        HttpCode: "200-399"
      TargetType: ip
################ Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref AddressTargetGroup1
          Type: forward
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
################ Load balancer Security group
  FargateAlbSG:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: VPC
    Properties:
      GroupDescription: SG for the Fargate ALB
      GroupName: !Sub ${AWS::StackName}-ALB-Security-group
      SecurityGroupIngress:
        - CidrIpv6: ::/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          Description: 'Inbound rule for IPv6 traffic'
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          Description: 'Inbound rule for IPv4 traffic'
      VpcId: !Ref VPC
################ Container Security group
  FargateContainerSG:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: FargateAlbSG
    Properties:
      VpcId: !Ref VPC
      GroupDescription: SG for the Fargate containers
      GroupName: !Sub ${AWS::StackName}-Container-Security-group
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !GetAtt FargateAlbSG.GroupId
          Description: Inbound rule for all traffic
############### Service
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - FargateContainerSG
      - ALB
    Properties:
      ServiceName: !Sub ${AWS::StackName}-Address-frontend
      LaunchType: FARGATE
      Cluster:
        Ref: Cluster
      DesiredCount: 1
      TaskDefinition:
        Ref: AddressTaskDefintion
      DeploymentConfiguration:
        MaximumPercent: 150
        MinimumHealthyPercent: 50
      DeploymentController:
        Type: ECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt FargateContainerSG.GroupId
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      LoadBalancers:
        - TargetGroupArn:
            Ref: AddressTargetGroup1
          ContainerPort: 5010
          ContainerName: !Sub ${AWS::StackName}-Address-frontend

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  Service:
    Description: A reference to the service created
    Value: !Ref Service

  TaskDefinition:
    Description: The task definition
    Value: !Ref AddressTaskDefintion

  Cluster:
    Description: The cluster created
    Value: !Ref Cluster

  DNSName:
    Description: The url of the created service
    Value: !GetAtt ALB.DNSName
